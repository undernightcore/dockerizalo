generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       Int    @id @default(autoincrement())
  email    String @unique
  password String
  name     String
}

model App {
  id          String                @id @default(uuid())
  name        String                @unique
  description String?
  mode        Mode                  @default(REPOSITORY)
  repository  String?
  image       String?
  branch      String?
  contextPath String?               @default("/")
  filePath    String?               @default("/Dockerfile")
  token       Token?                @relation(fields: [tokenId], references: [id], onDelete: SetNull)
  tokenId     String?
  ports       PortMapping[]
  mounts      BindMount[]
  variables   EnvironmentVariable[]
  builds      Build[]
  networks    Network[]
  labels      Label[]
  triggers    Trigger[]
}

model PortMapping {
  id       String @id @default(uuid())
  internal Int
  external Int
  app      App    @relation(fields: [appId], references: [id], onDelete: Cascade)
  appId    String

  @@unique([external, appId])
}

model BindMount {
  id       String @id @default(uuid())
  internal String
  host     String
  app      App    @relation(fields: [appId], references: [id], onDelete: Cascade)
  appId    String
}

model EnvironmentVariable {
  id    String  @id @default(uuid())
  key   String
  value String
  build Boolean
  app   App     @relation(fields: [appId], references: [id], onDelete: Cascade)
  appId String

  @@unique([key, appId])
}

model Build {
  id         String    @id @default(uuid())
  branch     String
  log        String
  manual     Boolean
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  finishedAt DateTime?
  status     Status    @default(BUILDING)
  app        App       @relation(fields: [appId], references: [id], onDelete: Cascade)
  appId      String
}

model Network {
  id       String  @id @default(uuid())
  name     String
  external Boolean
  app      App     @relation(fields: [appId], references: [id], onDelete: Cascade)
  appId    String

  @@unique([name, appId])
}

model Label {
  id    String @id @default(uuid())
  key   String
  value String
  app   App    @relation(fields: [appId], references: [id], onDelete: Cascade)
  appId String

  @@unique([key, appId])
}

model Token {
  id       String @id @default(uuid())
  name     String @unique
  username String
  password String
  apps     App[]
}

model Trigger {
  id    String @id @default(uuid())
  name  String
  app   App    @relation(fields: [appId], references: [id])
  appId String

  @@unique([name, appId])
}

model Setting {
  id    String @id @default(uuid())
  name  String @unique
  value String
}

enum Status {
  BUILDING
  FAILED
  SUCCESS
}

enum Mode {
  REPOSITORY
  IMAGE
}
